env_args:
  episode_limit: 10

  # state
  use_gnn_embedding: False
  embedding_length: 16
  history_length: 1
  if_include_channel_rank: False

  # reward
  reward: se_requirement
  reward_power_consumption_coef: 0.0
  sinr_threshold: -10
  barrier_function: exponential # exponential
  se_coef: 20 # 10-20 for step, 5 for exponential
  power_coef: 1
  if_use_local_power_sum: True
  if_sum_cost: False
  if_full_cooperation: False
  if_connection_cost: True

  simulation_scenario:
    if_use_cuda_sim: True
    step_length: 20
    morphology: urban
    number_of_ues: 6
    number_of_aps: 20
    max_serving_ue_count: 6
    max_measurment_ap_count: 20
    power_control_saved_model: /home/mzi/aps-mappo/onpolicy/envs/aps/lib/gnn_olp/trained_model/checkpoints/best_epoch=953.ckpt
    data_normalization_config: /home/mzi/aps-mappo/onpolicy/envs/aps/lib/gnn_olp/normalization_config.yaml
    precoding_algorithm: olp # olp, mrt, optimal
    seed: 100
    float_dtype_sim: torch.float32
    ap_radiation_power: 0.2
    signal_transmission_efficiency: 0.4
    ap_constant_power_consumption: 0.5 # 0.2
    if_sinr_in_db: True
    if_power_in_db: True
    ue_mobility_type: pedestrain # pedestrain, vehicular
    simulation_timestep: 50 # 50 ms
    # mean_vehicle_speed: 10
    # mean_pedestrian_speed: 3
    # mean_pedestrian_movement_duration: 3
    # mean_pedestrian_movement_pause: 3


# time space
## T_c: channel update [according to coherence time: 1ms]
## T_p: power control [is it realsitic to be 1ms?] 
### [if it's more than 1ms, (1) the power adaptation will be slow, causing lower sinr, 
###                         (2) we're changing the dynamics of the problem at hand, making it more difficult to predict the sinr]]
## T_a: AP selection [it definitely can't be 1ms, but 
###                   what's the tradeoff between higher and lower frequencies?]
